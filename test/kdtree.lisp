(in-package #:auxin-tests)

(plan 1)

(defun get-verts ()
  (make-array 200 :element-type 'veq:ff :initial-contents
    '(10.813675 10.427014 19.948442 -0.013836704 28.924166 -7.7689176 -5.4184875 -27.39798 11.402129
      -17.192 -27.438437 2.523847 4.8173876 25.249718 -5.639829 26.173119 20.236958
      4.2824273 -10.386902 -22.774883 -17.833456 9.497733 -18.120527 -15.417623 -4.652276
      6.503223 -0.8198237 10.02664 12.753904 -23.9388 -12.135042 6.9514184 24.557667
      9.123542 -22.54808 2.9434855 18.93866 -0.39829832 10.279101 15.4622 -13.064012
      23.442646 5.075483 -5.7628093 12.556162 25.369484 8.736762 -0.2069547 4.077132
      -3.3604305 -6.751875 -5.4201846 16.05596 -12.69333 12.923425 4.648978 -25.542381
      0.9634919 2.96019 -6.010255 -4.4467964 23.515644 17.551027 -16.034826 -29.227568
      0.9528029 3.1021585 17.17979 10.049055 -26.761168 -1.2004687 -18.270267 -1.7751282
      -8.543676 8.47017 -16.99601 3.549433 -20.002981 -14.480597 24.6029 4.0614667
      11.620877 14.317673 3.5338922 -0.8099555 -13.680208 22.465475 18.630829 5.8753824
      3.8195093 15.778194 13.743431 4.1913247 -2.9562023 -2.789232 2.7299793 22.035112
      0.6775114 -29.140625 -6.387448 -18.193083 -7.96357 -11.391337 -10.629251 -1.6490227
      -14.736138 -27.689634 -11.464689 8.455529 13.281991 -21.753738 18.81358 21.758015
      -13.197972 -22.751963 -11.804067 24.312487 2.686749 -2.7562656 16.027033 9.270069
      4.4834003 -12.923897 10.406606 -8.068204 23.516678 20.39912 -18.511642 -17.207607
      -8.146253 -19.106188 10.209585 2.914774 -6.652338 24.825678 15.515285 20.335993
      19.812225 -9.767231 23.078142 5.5003314 7.5785885 26.5007 0.77956635 -24.669174
      -8.376579 16.202353 3.9815252 4.6211896 -20.035997 12.644786 7.5913115 2.7264185
      20.439848 -24.105995 -7.1767545 21.210636 2.0424097 14.548045 -16.02957 -21.960526
      -16.076363 -9.034406 24.960472 18.518147 21.51401 -4.444289 5.1915746 -14.969485
      6.635225 9.262047 -4.161113 -0.8989027 -18.36813 20.844736 3.3514938 -14.447133
      -13.424873 19.814898 13.463216 2.3343902 1.8301127 -14.450685 7.562761 21.670952
      4.5624084 -10.686325 -6.0595875 -26.186829 2.8874178 19.167679 -13.721052 25.237446
      -9.055205 -24.151903 -12.981075 -14.276754 2.3777795 -19.007254 10.834896)))

(veq:fvdef slowrad (n verts rad (:va 2 x))
  (sort (loop for i from 0 below n
          if (< (veq:f2dst x (veq:2$ verts i)) rad) collect i) #'<))

(subtest "kdtree"
  (veq:fvprogn
   (veq:xlet ((verts (get-verts))
              (kd (kdtree:make 100 (lambda (i k) (aref verts (+ (* i 2) k)))
                                   (lambda (i (:va 2 x)) (veq:f2dst2 (veq:2$ verts i) x))))
              (f2!p1 (veq:f2 -11f0 7.1f0))  (f1!rad1 11f0)
              (f2!p2 (veq:f2 10.7f0 3.1f0)) (f1!rad2 7f0))

    (is (sort (kdtree:2rad kd rad1 p1) #'<) (slowrad 100 verts rad1 p1) :test #'equalp)
    (is (sort (kdtree:2rad kd rad2 p2) #'<) (slowrad 100 verts rad2 p2) :test #'equalp)
    (is (sort (kdtree:2rad kd rad2 100f0 3f0) #'<) nil :test #'equalp))))

(unless (finalize) (error "error in kdtree tests"))
